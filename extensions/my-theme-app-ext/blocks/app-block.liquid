<!-- barebone app: app-block.liquid -->

<!--
  See the useful documents.

  https://shopify.dev/themes/architecture/sections/app-blocks

  https://shopify.dev/apps/online-store/theme-app-extensions/extensions-framework

  https://shopify.dev/themes/architecture/settings/input-settings

  https://github.com/Shopify/theme-extension-getting-started
-->
<!--
  NOTE THAT you cannot write liquid variables in 'assets/***.css' like "span { color: {{ block.settings.color }}; }
-->
<span style="color: {{ block.settings.color }}">
  <div class="_my_app_block">
    <p>
      Theme App Extension
      <a
        href="https://shopify.dev/apps/online-store/theme-app-extensions/extensions-framework#app-blocks"
        target="_blank"
      >
        App Block
      </a>
      with
      <b>"target": "section"</b>
    </p>
    <p>
      in
      <b>`blocks/app-block.liquid'</b>
      with the color defined by value of
      <b>'block.settings.color'</b>.
    </p>

    <p>
      <b>&#123;&#123;product.title&#125;&#125;:</b>
      {{ product.title }}
    </p>

    {% if request.design_mode %}
      <!-- This will only render in the theme editor -->
      <p class="_my_app_block_editor">"I think you are viewing this app block within theme editor, right? &#x1f609"</p>
    {% endif %}

    <!-- See https://shopify.dev/api/liquid -->
    <ul>
      <li>
        <b>'block.settings.product'</b>
        in "Product":
        <b>{{ block.settings.product.id }}</b>
        (id) /
        <b>{{ block.settings.product.title }}</b>
        (title) /
        <b>{{ block.settings.product.price }}</b>
        (price)
      </li>
      <li>
        <b>'block.settings.text'</b>
        in "Text":
        <b>{{ block.settings.text }}</b>
      </li>
    </ul>

    <!-- Including snippets -->
    {% render 'barebone_snippet' %}

    <p><b>App proxy responses</b>: (You can check the difference of response data by login / logout)</p>
    <ul>
      <li>       
        <p>POST response of the app proxy<p>
         <!--
          Note that app embed is a section which can be some in the whole theme storefornt HTML in browsers, so you canot use 'id'.
        -->
        <pre class="barebone_app_proxy_response"></pre>
      </li>
      <li>
        <a href="" target="_blank" class="barebone_app_proxy_json">GET response of the app proxy</a>
      </li>
      <li>
        <a href="" class="barebone_app_proxy_liquid">Liquid response of the app proxy</a>
      </li>
    </ul>

    <p><a href="https://shopify.dev/docs/api/consent-tracking" target="_blank">window.Shopify</a> dump</p>
    <pre id="my_window_shopify_dump"></pre>

    {% comment %}
      The following code is for product pages only to check how line item properties work for line splitting for the same product.
    {% endcomment %}
    {%- if template.name == 'product' -%}
      <fieldset>
        <legend>Choose your line item property value</legend>
        <div>
          <input
            type="radio"
            id="barebone_line_item_property_1"
            name="barebone_line_item_property"
            value="Value-1"
            onClick="radio_click(this);"
          >
          <label for="barebone_line_item_property_1"> Value 1 </label>
        </div>
        <div>
          <input
            type="radio"
            id="barebone_line_item_property_2"
            name="barebone_line_item_property"
            value="Value-2"
            onClick="radio_click(this);"
          >
          <label for="barebone_line_item_property_2"> Value 2 </label>
        </div>
        <div>
          <input
            type="radio"
            id="barebone_line_item_property_3"
            name="barebone_line_item_property"
            value="Value-3"
            onClick="radio_click(this);"
          >
          <label for="barebone_line_item_property_3"> Value 3 </label>
        </div>
        <strong
          >See
          <a href="https://shopify.dev/docs/themes/architecture/templates/product#line-item-properties" target="_blank">
            Dev. Site</a
          >
          for Line Item Properties.</strong
        >
      </fieldset>
    {%- endif -%}

    {% comment %}
      The following code is for cart pages only to check how cart notes and attributes and note work.
    {% endcomment %}
    {%- if template.name == 'cart' -%}
      <fieldset>
        <legend>Set your cart note and attribute value</legend>
        <div>
          <textarea
            id="barebone_cart_note"
            name="barebone_cart_note"
            value=""
            onChange="text_change(this);"
          ></textarea>
        </div>
        <div>
          <input
            type="radio"
            id="barebone_cart_attribute_1"
            name="barebone_cart_attribute"
            value="Value-1"
            onClick="radio_click(this);"
          >
          <label for="barebone_cart_attribute_1"> Value 1 </label>
        </div>
        <div>
          <input
            type="radio"
            id="barebone_cart_attributey_2"
            name="barebone_cart_attribute"
            value="Value-2"
            onClick="radio_click(this);"
          >
          <label for="barebone_cart_attribute_2"> Value 2 </label>
        </div>
        <div>
          <input
            type="radio"
            id="barebone_cart_attribute_3"
            name="barebone_cart_attribute"
            value="Value-3"
            onClick="radio_click(this);"
          >
          <label for="barebone_cart_attribute_3"> Value 3 </label>
        </div>
        <strong
          >See
          <a
            href="https://shopify.dev/docs/themes/architecture/templates/cart#support-cart-notes-and-attributes"
            target="_blank"
          >
            Dev. Site</a
          >
          for Cart Notes and Attributes.</strong
        >
      </fieldset>
    {%- endif -%}
  </div>
</span>

<!--
  See the useful documents.

  https://shopify.dev/themes/architecture/sections/app-blocks

  https://shopify.dev/themes/architecture/settings#dynamic-sources

  https://help.shopify.com/en/manual/data-extensions/metafields/displaying-metafields-on-your-online-store

  NOTE THAT if you add this app block to the home page, the product picker shows a simpple product selector only
  without a metafield dynamic source, but if in the product page, the picker shows simple selector and metafield ones both.
  See the condtion in the document above.

  "target": "section" in schema means this is an "App Block" as portable session anywhere in theme pages.

  In this sample, "type": "product" and "type": "text" are supposed to be metafields in product data.
-->
<script type="text/javascript">
  // Note that you cannot call external functions defined in 'assets/***.js'. Also,imported script files by each block are global in theme storefront in browsers, which means any object are global scopes that cannot conflicts with others. For exmple, this script is possible to be inserted multiply if the merchant add multiple sections in the theme editor.console.log("blocks/app-block.liquid");
  document.getElementById('my_window_shopify_dump').innerText = JSON.stringify(window.Shopify, null, 4);

  console.log('template.name: {{ template.name }} product.id: {{ product.id }} variant.id: {{ variant.id }}');
</script>

{% comment %}
  The following code is for product pages only to check how line item properties work for line splitting for the same product.
{% endcomment %}
{%- if template.name == 'product' -%}
  <script type="text/javascript">
    // Test the multiple line item properties for the single product to split line items.
    // "radio_click" is called in "onClick" of each radio box defined above.
    const radio_click = (obj) => {
      const cart_add_forms = document.querySelectorAll('form[action="/cart/add"]');
      cart_add_forms.forEach((form) => {
        console.log(`cart_add_forms: ${form.innerHTML}`);
        // Adding an line item property to the existing form.
        // See https://shopify.dev/docs/themes/architecture/templates/product#line-item-properties
        const line_item_property_input = document.createElement('input');
        line_item_property_input.type = 'hidden';
        line_item_property_input.name = 'properties[barebone_line_item_property]';
        line_item_property_input.value = '';
        form.appendChild(line_item_property_input);
      });
      const line_item_property_inputs = document.querySelectorAll(
        'input[name="properties[barebone_line_item_property]"]'
      );
      line_item_property_inputs.forEach((input) => {
        input.value = obj.value;
      });
    };
  </script>
{%- endif -%}

{% comment %}
  The following code is for product pages only to check how cart notes and attributes work.
{% endcomment %}
{%- if template.name == 'cart' -%}
  <script type="text/javascript">
    // "text_change" is called in "onChange" of textarea defined above.
    const text_change = (obj) => {
      const cart_forms = document.querySelectorAll('form[action="/cart"]');
      cart_forms.forEach((form) => {
        console.log(`cart_forms: ${form.innerHTML}`);
        // Adding a cart note to the existing form.
        // See https://shopify.dev/docs/themes/architecture/templates/cart#cart-notes
        const cart_note_input = document.createElement('input');
        cart_note_input.type = 'hidden';
        cart_note_input.name = 'note';
        cart_note_input.setAttribute('form', 'cart');
        cart_note_input.value = '';
        form.appendChild(cart_note_input);
      });
      const cart_note_inputs = document.querySelectorAll('input[name="note"][form="cart"]');
      cart_note_inputs.forEach((input) => {
        input.value = obj.value;
      });
    };
    // "radio_click" is called in "onClick" of each radio box defined above.
    const radio_click = (obj) => {
      const cart_forms = document.querySelectorAll('form[action="/cart"]');
      cart_forms.forEach((form) => {
        console.log(`cart_forms: ${form.innerHTML}`);
        // Adding a cart attribute to the existing form.
        // See https://shopify.dev/docs/themes/architecture/templates/cart#cart-attributes
        const cart_attribute_input = document.createElement('input');
        cart_attribute_input.type = 'hidden';
        cart_attribute_input.name = 'attributes[barebone_cart_attribute]';
        cart_attribute_input.value = '';
        form.appendChild(cart_attribute_input);
      });
      const cart_attribute_inputs = document.querySelectorAll('input[name="attributes[barebone_cart_attribute]"]');
      cart_attribute_inputs.forEach((input) => {
        input.value = obj.value;
      });
    };
  </script>
{%- endif -%}

{% schema %}
{
  "name": "Barebone App Block",
  "target": "section",
  "stylesheet": "barebone.css",
  "javascript": "barebone.js",
  "settings": [
    {
      "label": "Color",
      "id": "color",
      "type": "color",
      "default": "#000000"
    },
    {
      "type": "product",
      "id": "product",
      "label": "Product"
    },
    {
      "type": "text",
      "id": "text",
      "label": "Text"
    }
  ]
}
{% endschema %}
