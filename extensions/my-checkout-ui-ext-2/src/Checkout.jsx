import {
  reactExtension,
  Banner,
  BlockStack,
  Text,
  useApi,
  useApplyAttributeChange,
  useInstructions,
  useTranslate,
  useAppMetafields,
  useMetafields,
  useApplyDiscountCodeChange,
  useAttributeValues,
  useDiscountCodes,
  useDiscountAllocations
} from "@shopify/ui-extensions-react/checkout";
import { useEffect } from "react";

export default reactExtension("purchase.checkout.block.render", () => (
  <Extension />
));

function Extension() {
  const translate = useTranslate();
  const api = useApi();
  const instructions = useInstructions();
  const applyAttributeChange = useApplyAttributeChange();
  const applyDiscountCodeChange = useApplyDiscountCodeChange();

  // console.log(`Checkout.jsx api: ${JSON.stringify(api, null, 4)}`);

  // The following useAppMetafields can retrieve all metafields with target type specfication.
  // See https://shopify.dev/docs/api/checkout-ui-extensions/unstable/apis/metafields#useappmetafields-propertydetail-filters
  // Use the useAppMetafields hook to access app metafields (stored in Shop with its definition generated by API).
  const appMetafield1 = useAppMetafields({ "namespace": "barebone_app", "key": "url", "type": "shop" })
    .map((m) => { return m.metafield.value; }).join(' ');
  console.log(`Extension() / appMetafield1: ${JSON.stringify(appMetafield1)}`);
  // Use the useAppMetafields hook to access app metafields (stored in Product with its definition generated by API).
  const appMetafield2 = useAppMetafields({ "namespace": "barebone_app_upsell", "key": "product_id", "type": "product" })
    .map((m) => { return m.metafield.value; }).join(' ');
  console.log(`Extension() / appMetafield2: ${JSON.stringify(appMetafield2)}`);

  // The following useMetafields can retrieve checkout related metafields only. 
  // See https://shopify.dev/docs/api/checkout-ui-extensions/unstable/apis/metafields#usemetafields-propertydetail-filters
  // Use the useMetafields hook to access metafields (stored in Shop with its definition generated by API).  
  const metafield1 = useMetafields({ "namespace": "barebone_app", "key": "url" })
    .map((m) => { return m.metafield.value; }).join('');
  console.log(`Extension() / metafield1: ${JSON.stringify(metafield1)}`);
  // Use the useMetafields hook to access metafields (stored in Product with its definition generated by API).
  const metafield2 = useMetafields({ "namespace": "barebone_app_upsell", "key": "product_id" })
    .map((m) => { return m.metafield.value; }).join('');
  console.log(`Extension() / metafield2: ${JSON.stringify(metafield2)}`);

  // Check if the discount update eligibility.
  if (!instructions.discounts.canUpdateDiscountCodes) {
    return (
      <Banner status="warning">
        Loyalty discounts are unavailable
      </Banner>
    );
  }

  // Get the cart attirbute that stores the input discount code in the cart Liquid page to apply to the checkout.
  const attrValue = useAttributeValues(["barebone_cart_attribute_code"]).map((v) => v).join(''); // This is supposed to the same attribute in `./my-theme-app-ext/blocks/app-block.liquid`
  console.log(`Extension() / attrValue: ${attrValue}`);
  useEffect(() => {
    const type = attrValue !== '' ? 'addDiscountCode' : 'removeDiscountCode';
    applyDiscountCodeChange({
      type: type,
      code: attrValue
    }).then((res) => {
      console.log(`Extension() / useEffect() / applyDiscountCodeChange type: ${type} code: ${attrValue} reponse: ${JSON.stringify(res)}`);
      if (typeof res.type !== 'undefined' && res.type === 'success') {
        api.storage.write('initiate', 'true').then(() => {
          console.log(`Extension() / useEffect() / applyDiscountCodeChange type: ${type} code: ${attrValue} / api.storage.write('initiate', 'true') void`);
        });
      }
    }).catch((e) => {
      console.log(`Extension() / useEffect() / applyDiscountCodeChange type: ${type} code: ${attrValue} exception: ${JSON.stringify(e)}`);
    });
  }, [attrValue]);

  // If the applied discount code changed = remove or input another code manually, set the value to the cart attirbute too.
  const discountCode = useDiscountCodes().map((c) => c.code).join('');
  console.log(`Extension() / discountCode: ${JSON.stringify(discountCode)}`);
  useEffect(() => {
    api.storage.read('initiate').then((value) => {
      console.log(`Extension() / useEffect() / api.storage.read('initiate') ${value}`);
      if (value == null) return;
      applyAttributeChange({
        type: "updateAttribute",
        key: "barebone_cart_attribute_code",
        value: discountCode,
      }).then((res) => {
        console.log(`Extension() / useEffect() / api.storage.read('initiate') ${value} / applyAttributeChange value: ${discountCode} reponse: ${JSON.stringify(res)}`);
        if (typeof res.type !== 'undefined' && res.type === 'success') {
          api.storage.delete('initiate').then(() => {
            console.log(`Extension() / useEffect() / api.storage.read('initiate') ${value} / applyAttributeChange value: ${discountCode} / api.storage.delete('initiate') void`);
          });
        }
      }).catch((e) => {
        console.log(`Extension() / useEffect() / api.storage.read('initiate') ${value} / applyAttributeChange value: ${discountCode} exception: ${JSON.stringify(e)}`);
      });
    });
  }, [discountCode]);

  // Check the current discont allocations.
  useDiscountAllocations().map((json) => {
    console.log(`Extension() / useDiscountAllocations() json: ${JSON.stringify(json)}`);
  });

  return (
    <BlockStack border={"dotted"} padding={"tight"}>
      <Banner title="api.extension.target">
        {translate("welcome", {
          target: <Text emphasis="bold">{api.extension.target}</Text>,
        })}
      </Banner>
      <Banner>
        <Text emphasis="bold">App Metafield 1 Value: </Text><Text> {appMetafield1}</Text>
      </Banner>
      <Banner>
        <Text emphasis="bold">App Metafield 2 Value: </Text><Text> {appMetafield2}</Text>
      </Banner>
    </BlockStack>
  );

}