import {
  reactExtension,
  Banner,
  BlockStack,
  Text,
  useApi,
  useApplyAttributeChange,
  useInstructions,
  useTranslate,
  useAppMetafields,
  useMetafields,
  useApplyDiscountCodeChange,
  useAttributeValues,
  useDiscountCodes,
  useDiscountAllocations
} from "@shopify/ui-extensions-react/checkout";
import { useEffect } from "react";

export default reactExtension("purchase.checkout.block.render", () => (
  <Extension />
));

function Extension() {
  const api = useApi();
  const translate = useTranslate();  
  const instructions = useInstructions();
  const applyAttributeChange = useApplyAttributeChange();
  const applyDiscountCodeChange = useApplyDiscountCodeChange();

  // console.log(`Extension() api: ${JSON.stringify(api, null, 4)}`);

  // The following useAppMetafields can retrieve all metafields with target type specfication.
  // See https://shopify.dev/docs/api/checkout-ui-extensions/unstable/apis/metafields#useappmetafields-propertydetail-filters
  // Use the useAppMetafields hook to access app metafields (stored in Shop with its definition generated by API).
  const appMetafield1 = useAppMetafields({ "namespace": "barebone_app", "key": "url", "type": "shop" })
    .map((m) => { return m.metafield.value; }).join(' ');
  console.log(`Extension() / appMetafield1: ${JSON.stringify(appMetafield1)}`);
  // Use the useAppMetafields hook to access app metafields (stored in Product with its definition generated by API).
  const appMetafield2 = useAppMetafields({ "namespace": "barebone_app_upsell", "key": "product_id", "type": "product" })
    .map((m) => { return m.metafield.value; }).join(' ');
  console.log(`Extension() / appMetafield2: ${JSON.stringify(appMetafield2)}`);

  // The following useMetafields can retrieve checkout related metafields only. 
  // See https://shopify.dev/docs/api/checkout-ui-extensions/unstable/apis/metafields#usemetafields-propertydetail-filters
  // Use the useMetafields hook to access metafields (stored in Shop with its definition generated by API).  
  const metafield1 = useMetafields({ "namespace": "barebone_app", "key": "url" })
    .map((m) => { return m.metafield.value; }).join('');
  console.log(`Extension() / metafield1: ${JSON.stringify(metafield1)}`);
  // Use the useMetafields hook to access metafields (stored in Product with its definition generated by API).
  const metafield2 = useMetafields({ "namespace": "barebone_app_upsell", "key": "product_id" })
    .map((m) => { return m.metafield.value; }).join('');
  console.log(`Extension() / metafield2: ${JSON.stringify(metafield2)}`);

  useEffect(() => {
    // This is the timing of some of metafields changed.
    // If you want to do something like fetch external URL with the value, write here.
    console.log(`Extension() / useEffect() / appMetafield1: ${JSON.stringify(appMetafield1)} 
      appMetafield2: ${JSON.stringify(appMetafield2)} metafield1: ${JSON.stringify(metafield1)} 
      metafield2: ${JSON.stringify(metafield2)}`);

    // DO SOMETHING

  }, [appMetafield1, appMetafield2, metafield1, metafield2]);

  // Check if the discount update eligibility.
  if (!instructions.discounts.canUpdateDiscountCodes) {
    return (
      <Banner status="warning">
        Loyalty discounts are unavailable
      </Banner>
    );
  }

  // Get the current cart attribute value of the discount code.
  const attrValue = useAttributeValues(["barebone_cart_attribute_code"]).map((v) => v).join(''); // This is supposed to the same attribute in `./my-theme-app-ext/blocks/app-block.liquid`
  console.log(`Extension() / attrValue: ${attrValue}`);

  // Get the current discount code to be in the cart attribute above.
  const discountCode = useDiscountCodes().map((c) => c.code).join('');
  console.log(`Extension() / discountCode: ${JSON.stringify(discountCode)}`);

  useEffect(() => {
    // This is the timing of the current attribute value changed.
    // If you want to do something like fetch external URL with the value, write here.
    console.log(`Extension() / useEffect() / attrValue: ${attrValue}  
      discountCode: ${discountCode}`);

    // Buyer operation cases between cart and checkout
    if (attrValue === '' && discountCode === '') {
      // No discount code set in cart or checkout (Case 0).
      // Do nothing.
      console.log(`Extension() / useEffect() / Case 0`);
    } else if (attrValue !== '' && discountCode === '') {
      // The buyer set the code in cart and it is being applied to checkout initially (Case 1), or 
      // the buyer remove the code in checkout (Case 2).
      api.storage.read('applied').then((cache) => {
        if (cache == null) {
          applyDiscountCodeChange({
            type: 'addDiscountCode',
            code: attrValue
          }).then((res) => {
            console.log(`Extension() / useEffect() / Case 1 applyDiscountCodeChange type: addDiscountCode code: ${attrValue} reponse: ${JSON.stringify(res)}`);
            api.storage.write('applied', 'true');
          }).catch((e) => {
            console.log(`Extension() / useEffect() / Case 1 applyDiscountCodeChange type: addDiscountCode code: ${attrValue} exception: ${JSON.stringify(e)}`);
          });
        } else {
          applyAttributeChange({
            type: "updateAttribute",
            key: "barebone_cart_attribute_code",
            value: '',
          }).then((res) => {
            console.log(`Extension() / useEffect() / Case 2 applyAttributeChange value: ${discountCode} reponse: ${JSON.stringify(res)}`);
            api.storage.delete('applied');
          }).catch((e) => {
            console.log(`Extension() / useEffect() / Case 2 applyAttributeChange value: ${discountCode} exception: ${JSON.stringify(e)}`);
          });
        }
      });
    } else if (attrValue !== '' && discountCode !== '') {
      // The buyer set the code in cart and it has been applied to checkout (Case 3), or 
      // the buyer changed the code in checkout (Case 4).
      if (attrValue === discountCode) {
        // Case 3, do nothing.
        console.log(`Extension() / useEffect() / Case 3`);
      } else {
        // Case 4, overwrite the attribute with the current code (if they want to reset, they need to clear the code in Case 2)
        applyAttributeChange({
          type: "updateAttribute",
          key: "barebone_cart_attribute_code",
          value: discountCode,
        }).then((res) => {
          console.log(`Extension() / useEffect() / Case 4 applyAttributeChange value: ${discountCode} reponse: ${JSON.stringify(res)}`);
        }).catch((e) => {
          console.log(`Extension() / useEffect() / Case 4 applyAttributeChange value: ${discountCode} exception: ${JSON.stringify(e)}`);
        });
      }
    } else if (attrValue === '' && discountCode !== '') {
      // The buyer didn't set the code in cart but did in checkout (Case 5).
      applyAttributeChange({
        type: "updateAttribute",
        key: "barebone_cart_attribute_code",
        value: discountCode,
      }).then((res) => {
        console.log(`Extension() / useEffect() / Case 5 applyAttributeChange value: ${discountCode} reponse: ${JSON.stringify(res)}`);
      }).catch((e) => {
        console.log(`Extension() / useEffect() / Case 5 applyAttributeChange value: ${discountCode} exception: ${JSON.stringify(e)}`);
      });
    } else {
      // No cases.
    }

  }, [attrValue, discountCode]);

  // Check the current discont allocations.
  useDiscountAllocations().map((json) => {
    console.log(`Extension() / useDiscountAllocations() json: ${JSON.stringify(json)}`);
  });

  return (
    <BlockStack border={"dotted"} padding={"tight"}>
      <Banner title="api.extension.target">
        {translate("welcome", {
          target: <Text emphasis="bold">{api.extension.target}</Text>,
        })}
      </Banner>
      <Banner>
        <Text emphasis="bold">App Metafield 1 Value: </Text><Text> {appMetafield1}</Text>
      </Banner>
      <Banner>
        <Text emphasis="bold">App Metafield 2 Value: </Text><Text> {appMetafield2}</Text>
      </Banner>
      <Banner>
        <Text emphasis="bold">Your current attribute value: </Text><Text> {attrValue}</Text>
      </Banner>
      <Banner>
        <Text emphasis="bold">Your current discount code: </Text><Text> {discountCode}</Text>
      </Banner>
    </BlockStack>
  );

}